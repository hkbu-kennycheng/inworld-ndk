// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inworld_ndkData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_inworld_5fndkData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_inworld_5fndkData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_inworld_5fndkData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_inworld_5fndkData_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_inworld_5fndkData_2eproto;
namespace inworld {
namespace ndkData {
class AgentInfo;
struct AgentInfoDefaultTypeInternal;
extern AgentInfoDefaultTypeInternal _AgentInfo_default_instance_;
class AgentInfoArray;
struct AgentInfoArrayDefaultTypeInternal;
extern AgentInfoArrayDefaultTypeInternal _AgentInfoArray_default_instance_;
class ClientOptions;
struct ClientOptionsDefaultTypeInternal;
extern ClientOptionsDefaultTypeInternal _ClientOptions_default_instance_;
class SessionInfo;
struct SessionInfoDefaultTypeInternal;
extern SessionInfoDefaultTypeInternal _SessionInfo_default_instance_;
}  // namespace ndkData
}  // namespace inworld
PROTOBUF_NAMESPACE_OPEN
template<> ::inworld::ndkData::AgentInfo* Arena::CreateMaybeMessage<::inworld::ndkData::AgentInfo>(Arena*);
template<> ::inworld::ndkData::AgentInfoArray* Arena::CreateMaybeMessage<::inworld::ndkData::AgentInfoArray>(Arena*);
template<> ::inworld::ndkData::ClientOptions* Arena::CreateMaybeMessage<::inworld::ndkData::ClientOptions>(Arena*);
template<> ::inworld::ndkData::SessionInfo* Arena::CreateMaybeMessage<::inworld::ndkData::SessionInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace inworld {
namespace ndkData {

enum ConnectionState : int {
  Idle = 0,
  Connecting = 1,
  Connected = 2,
  Failed = 3,
  Paused = 4,
  Disconnected = 5,
  Reconnecting = 6,
  ConnectionState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ConnectionState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ConnectionState_IsValid(int value);
constexpr ConnectionState ConnectionState_MIN = Idle;
constexpr ConnectionState ConnectionState_MAX = Reconnecting;
constexpr int ConnectionState_ARRAYSIZE = ConnectionState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConnectionState_descriptor();
template<typename T>
inline const std::string& ConnectionState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConnectionState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConnectionState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConnectionState_descriptor(), enum_t_value);
}
inline bool ConnectionState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ConnectionState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConnectionState>(
    ConnectionState_descriptor(), name, value);
}
// ===================================================================

class ClientOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inworld.ndkData.ClientOptions) */ {
 public:
  inline ClientOptions() : ClientOptions(nullptr) {}
  ~ClientOptions() override;
  explicit PROTOBUF_CONSTEXPR ClientOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientOptions(const ClientOptions& from);
  ClientOptions(ClientOptions&& from) noexcept
    : ClientOptions() {
    *this = ::std::move(from);
  }

  inline ClientOptions& operator=(const ClientOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientOptions& operator=(ClientOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientOptions* internal_default_instance() {
    return reinterpret_cast<const ClientOptions*>(
               &_ClientOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClientOptions& a, ClientOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClientOptions& from) {
    ClientOptions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inworld.ndkData.ClientOptions";
  }
  protected:
  explicit ClientOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthUrlFieldNumber = 1,
    kLoadSceneUrlFieldNumber = 2,
    kSceneNameFieldNumber = 3,
    kApiKeyFieldNumber = 4,
    kApiSecretFieldNumber = 5,
    kPlayerNameFieldNumber = 6,
    kTokenFieldNumber = 7,
    kSessionIdFieldNumber = 8,
  };
  // string auth_url = 1;
  void clear_auth_url();
  const std::string& auth_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_auth_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_auth_url();
  PROTOBUF_NODISCARD std::string* release_auth_url();
  void set_allocated_auth_url(std::string* auth_url);
  private:
  const std::string& _internal_auth_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_auth_url(const std::string& value);
  std::string* _internal_mutable_auth_url();
  public:

  // string load_scene_url = 2;
  void clear_load_scene_url();
  const std::string& load_scene_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_load_scene_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_load_scene_url();
  PROTOBUF_NODISCARD std::string* release_load_scene_url();
  void set_allocated_load_scene_url(std::string* load_scene_url);
  private:
  const std::string& _internal_load_scene_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_load_scene_url(const std::string& value);
  std::string* _internal_mutable_load_scene_url();
  public:

  // string scene_name = 3;
  void clear_scene_name();
  const std::string& scene_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_scene_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_scene_name();
  PROTOBUF_NODISCARD std::string* release_scene_name();
  void set_allocated_scene_name(std::string* scene_name);
  private:
  const std::string& _internal_scene_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_scene_name(const std::string& value);
  std::string* _internal_mutable_scene_name();
  public:

  // string api_key = 4;
  void clear_api_key();
  const std::string& api_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_api_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_api_key();
  PROTOBUF_NODISCARD std::string* release_api_key();
  void set_allocated_api_key(std::string* api_key);
  private:
  const std::string& _internal_api_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_api_key(const std::string& value);
  std::string* _internal_mutable_api_key();
  public:

  // string api_secret = 5;
  void clear_api_secret();
  const std::string& api_secret() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_api_secret(ArgT0&& arg0, ArgT... args);
  std::string* mutable_api_secret();
  PROTOBUF_NODISCARD std::string* release_api_secret();
  void set_allocated_api_secret(std::string* api_secret);
  private:
  const std::string& _internal_api_secret() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_api_secret(const std::string& value);
  std::string* _internal_mutable_api_secret();
  public:

  // string player_name = 6;
  void clear_player_name();
  const std::string& player_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_player_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_player_name();
  PROTOBUF_NODISCARD std::string* release_player_name();
  void set_allocated_player_name(std::string* player_name);
  private:
  const std::string& _internal_player_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_name(const std::string& value);
  std::string* _internal_mutable_player_name();
  public:

  // string token = 7;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string session_id = 8;
  void clear_session_id();
  const std::string& session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // @@protoc_insertion_point(class_scope:inworld.ndkData.ClientOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr load_scene_url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scene_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr api_key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr api_secret_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_inworld_5fndkData_2eproto;
};
// -------------------------------------------------------------------

class AgentInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inworld.ndkData.AgentInfo) */ {
 public:
  inline AgentInfo() : AgentInfo(nullptr) {}
  ~AgentInfo() override;
  explicit PROTOBUF_CONSTEXPR AgentInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AgentInfo(const AgentInfo& from);
  AgentInfo(AgentInfo&& from) noexcept
    : AgentInfo() {
    *this = ::std::move(from);
  }

  inline AgentInfo& operator=(const AgentInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgentInfo& operator=(AgentInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AgentInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const AgentInfo* internal_default_instance() {
    return reinterpret_cast<const AgentInfo*>(
               &_AgentInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AgentInfo& a, AgentInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AgentInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AgentInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AgentInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AgentInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AgentInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AgentInfo& from) {
    AgentInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgentInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inworld.ndkData.AgentInfo";
  }
  protected:
  explicit AgentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrainNameFieldNumber = 1,
    kAgentIdFieldNumber = 2,
    kGivenNameFieldNumber = 3,
  };
  // string BrainName = 1;
  void clear_brainname();
  const std::string& brainname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_brainname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_brainname();
  PROTOBUF_NODISCARD std::string* release_brainname();
  void set_allocated_brainname(std::string* brainname);
  private:
  const std::string& _internal_brainname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_brainname(const std::string& value);
  std::string* _internal_mutable_brainname();
  public:

  // string AgentId = 2;
  void clear_agentid();
  const std::string& agentid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_agentid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_agentid();
  PROTOBUF_NODISCARD std::string* release_agentid();
  void set_allocated_agentid(std::string* agentid);
  private:
  const std::string& _internal_agentid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_agentid(const std::string& value);
  std::string* _internal_mutable_agentid();
  public:

  // string GivenName = 3;
  void clear_givenname();
  const std::string& givenname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_givenname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_givenname();
  PROTOBUF_NODISCARD std::string* release_givenname();
  void set_allocated_givenname(std::string* givenname);
  private:
  const std::string& _internal_givenname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_givenname(const std::string& value);
  std::string* _internal_mutable_givenname();
  public:

  // @@protoc_insertion_point(class_scope:inworld.ndkData.AgentInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr brainname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr agentid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr givenname_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_inworld_5fndkData_2eproto;
};
// -------------------------------------------------------------------

class SessionInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inworld.ndkData.SessionInfo) */ {
 public:
  inline SessionInfo() : SessionInfo(nullptr) {}
  ~SessionInfo() override;
  explicit PROTOBUF_CONSTEXPR SessionInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SessionInfo(const SessionInfo& from);
  SessionInfo(SessionInfo&& from) noexcept
    : SessionInfo() {
    *this = ::std::move(from);
  }

  inline SessionInfo& operator=(const SessionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionInfo& operator=(SessionInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SessionInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SessionInfo* internal_default_instance() {
    return reinterpret_cast<const SessionInfo*>(
               &_SessionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SessionInfo& a, SessionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SessionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SessionInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SessionInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SessionInfo& from) {
    SessionInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inworld.ndkData.SessionInfo";
  }
  protected:
  explicit SessionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
    kTokenFieldNumber = 2,
    kExpirationTimeFieldNumber = 3,
    kIsValidFieldNumber = 4,
  };
  // string SessionId = 1;
  void clear_sessionid();
  const std::string& sessionid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sessionid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sessionid();
  PROTOBUF_NODISCARD std::string* release_sessionid();
  void set_allocated_sessionid(std::string* sessionid);
  private:
  const std::string& _internal_sessionid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sessionid(const std::string& value);
  std::string* _internal_mutable_sessionid();
  public:

  // string Token = 2;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // int64 ExpirationTime = 3;
  void clear_expirationtime();
  int64_t expirationtime() const;
  void set_expirationtime(int64_t value);
  private:
  int64_t _internal_expirationtime() const;
  void _internal_set_expirationtime(int64_t value);
  public:

  // bool IsValid = 4;
  void clear_isvalid();
  bool isvalid() const;
  void set_isvalid(bool value);
  private:
  bool _internal_isvalid() const;
  void _internal_set_isvalid(bool value);
  public:

  // @@protoc_insertion_point(class_scope:inworld.ndkData.SessionInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sessionid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
    int64_t expirationtime_;
    bool isvalid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_inworld_5fndkData_2eproto;
};
// -------------------------------------------------------------------

class AgentInfoArray final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inworld.ndkData.AgentInfoArray) */ {
 public:
  inline AgentInfoArray() : AgentInfoArray(nullptr) {}
  ~AgentInfoArray() override;
  explicit PROTOBUF_CONSTEXPR AgentInfoArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AgentInfoArray(const AgentInfoArray& from);
  AgentInfoArray(AgentInfoArray&& from) noexcept
    : AgentInfoArray() {
    *this = ::std::move(from);
  }

  inline AgentInfoArray& operator=(const AgentInfoArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgentInfoArray& operator=(AgentInfoArray&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AgentInfoArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const AgentInfoArray* internal_default_instance() {
    return reinterpret_cast<const AgentInfoArray*>(
               &_AgentInfoArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AgentInfoArray& a, AgentInfoArray& b) {
    a.Swap(&b);
  }
  inline void Swap(AgentInfoArray* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AgentInfoArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AgentInfoArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AgentInfoArray>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AgentInfoArray& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AgentInfoArray& from) {
    AgentInfoArray::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgentInfoArray* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inworld.ndkData.AgentInfoArray";
  }
  protected:
  explicit AgentInfoArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentInfoListFieldNumber = 1,
  };
  // repeated .inworld.ndkData.AgentInfo agent_info_list = 1;
  int agent_info_list_size() const;
  private:
  int _internal_agent_info_list_size() const;
  public:
  void clear_agent_info_list();
  ::inworld::ndkData::AgentInfo* mutable_agent_info_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inworld::ndkData::AgentInfo >*
      mutable_agent_info_list();
  private:
  const ::inworld::ndkData::AgentInfo& _internal_agent_info_list(int index) const;
  ::inworld::ndkData::AgentInfo* _internal_add_agent_info_list();
  public:
  const ::inworld::ndkData::AgentInfo& agent_info_list(int index) const;
  ::inworld::ndkData::AgentInfo* add_agent_info_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inworld::ndkData::AgentInfo >&
      agent_info_list() const;

  // @@protoc_insertion_point(class_scope:inworld.ndkData.AgentInfoArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inworld::ndkData::AgentInfo > agent_info_list_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_inworld_5fndkData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientOptions

// string auth_url = 1;
inline void ClientOptions::clear_auth_url() {
  _impl_.auth_url_.ClearToEmpty();
}
inline const std::string& ClientOptions::auth_url() const {
  // @@protoc_insertion_point(field_get:inworld.ndkData.ClientOptions.auth_url)
  return _internal_auth_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientOptions::set_auth_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.auth_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:inworld.ndkData.ClientOptions.auth_url)
}
inline std::string* ClientOptions::mutable_auth_url() {
  std::string* _s = _internal_mutable_auth_url();
  // @@protoc_insertion_point(field_mutable:inworld.ndkData.ClientOptions.auth_url)
  return _s;
}
inline const std::string& ClientOptions::_internal_auth_url() const {
  return _impl_.auth_url_.Get();
}
inline void ClientOptions::_internal_set_auth_url(const std::string& value) {
  
  _impl_.auth_url_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientOptions::_internal_mutable_auth_url() {
  
  return _impl_.auth_url_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientOptions::release_auth_url() {
  // @@protoc_insertion_point(field_release:inworld.ndkData.ClientOptions.auth_url)
  return _impl_.auth_url_.Release();
}
inline void ClientOptions::set_allocated_auth_url(std::string* auth_url) {
  if (auth_url != nullptr) {
    
  } else {
    
  }
  _impl_.auth_url_.SetAllocated(auth_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.auth_url_.IsDefault()) {
    _impl_.auth_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:inworld.ndkData.ClientOptions.auth_url)
}

// string load_scene_url = 2;
inline void ClientOptions::clear_load_scene_url() {
  _impl_.load_scene_url_.ClearToEmpty();
}
inline const std::string& ClientOptions::load_scene_url() const {
  // @@protoc_insertion_point(field_get:inworld.ndkData.ClientOptions.load_scene_url)
  return _internal_load_scene_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientOptions::set_load_scene_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.load_scene_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:inworld.ndkData.ClientOptions.load_scene_url)
}
inline std::string* ClientOptions::mutable_load_scene_url() {
  std::string* _s = _internal_mutable_load_scene_url();
  // @@protoc_insertion_point(field_mutable:inworld.ndkData.ClientOptions.load_scene_url)
  return _s;
}
inline const std::string& ClientOptions::_internal_load_scene_url() const {
  return _impl_.load_scene_url_.Get();
}
inline void ClientOptions::_internal_set_load_scene_url(const std::string& value) {
  
  _impl_.load_scene_url_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientOptions::_internal_mutable_load_scene_url() {
  
  return _impl_.load_scene_url_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientOptions::release_load_scene_url() {
  // @@protoc_insertion_point(field_release:inworld.ndkData.ClientOptions.load_scene_url)
  return _impl_.load_scene_url_.Release();
}
inline void ClientOptions::set_allocated_load_scene_url(std::string* load_scene_url) {
  if (load_scene_url != nullptr) {
    
  } else {
    
  }
  _impl_.load_scene_url_.SetAllocated(load_scene_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.load_scene_url_.IsDefault()) {
    _impl_.load_scene_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:inworld.ndkData.ClientOptions.load_scene_url)
}

// string scene_name = 3;
inline void ClientOptions::clear_scene_name() {
  _impl_.scene_name_.ClearToEmpty();
}
inline const std::string& ClientOptions::scene_name() const {
  // @@protoc_insertion_point(field_get:inworld.ndkData.ClientOptions.scene_name)
  return _internal_scene_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientOptions::set_scene_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.scene_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:inworld.ndkData.ClientOptions.scene_name)
}
inline std::string* ClientOptions::mutable_scene_name() {
  std::string* _s = _internal_mutable_scene_name();
  // @@protoc_insertion_point(field_mutable:inworld.ndkData.ClientOptions.scene_name)
  return _s;
}
inline const std::string& ClientOptions::_internal_scene_name() const {
  return _impl_.scene_name_.Get();
}
inline void ClientOptions::_internal_set_scene_name(const std::string& value) {
  
  _impl_.scene_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientOptions::_internal_mutable_scene_name() {
  
  return _impl_.scene_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientOptions::release_scene_name() {
  // @@protoc_insertion_point(field_release:inworld.ndkData.ClientOptions.scene_name)
  return _impl_.scene_name_.Release();
}
inline void ClientOptions::set_allocated_scene_name(std::string* scene_name) {
  if (scene_name != nullptr) {
    
  } else {
    
  }
  _impl_.scene_name_.SetAllocated(scene_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.scene_name_.IsDefault()) {
    _impl_.scene_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:inworld.ndkData.ClientOptions.scene_name)
}

// string api_key = 4;
inline void ClientOptions::clear_api_key() {
  _impl_.api_key_.ClearToEmpty();
}
inline const std::string& ClientOptions::api_key() const {
  // @@protoc_insertion_point(field_get:inworld.ndkData.ClientOptions.api_key)
  return _internal_api_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientOptions::set_api_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.api_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:inworld.ndkData.ClientOptions.api_key)
}
inline std::string* ClientOptions::mutable_api_key() {
  std::string* _s = _internal_mutable_api_key();
  // @@protoc_insertion_point(field_mutable:inworld.ndkData.ClientOptions.api_key)
  return _s;
}
inline const std::string& ClientOptions::_internal_api_key() const {
  return _impl_.api_key_.Get();
}
inline void ClientOptions::_internal_set_api_key(const std::string& value) {
  
  _impl_.api_key_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientOptions::_internal_mutable_api_key() {
  
  return _impl_.api_key_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientOptions::release_api_key() {
  // @@protoc_insertion_point(field_release:inworld.ndkData.ClientOptions.api_key)
  return _impl_.api_key_.Release();
}
inline void ClientOptions::set_allocated_api_key(std::string* api_key) {
  if (api_key != nullptr) {
    
  } else {
    
  }
  _impl_.api_key_.SetAllocated(api_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.api_key_.IsDefault()) {
    _impl_.api_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:inworld.ndkData.ClientOptions.api_key)
}

// string api_secret = 5;
inline void ClientOptions::clear_api_secret() {
  _impl_.api_secret_.ClearToEmpty();
}
inline const std::string& ClientOptions::api_secret() const {
  // @@protoc_insertion_point(field_get:inworld.ndkData.ClientOptions.api_secret)
  return _internal_api_secret();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientOptions::set_api_secret(ArgT0&& arg0, ArgT... args) {
 
 _impl_.api_secret_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:inworld.ndkData.ClientOptions.api_secret)
}
inline std::string* ClientOptions::mutable_api_secret() {
  std::string* _s = _internal_mutable_api_secret();
  // @@protoc_insertion_point(field_mutable:inworld.ndkData.ClientOptions.api_secret)
  return _s;
}
inline const std::string& ClientOptions::_internal_api_secret() const {
  return _impl_.api_secret_.Get();
}
inline void ClientOptions::_internal_set_api_secret(const std::string& value) {
  
  _impl_.api_secret_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientOptions::_internal_mutable_api_secret() {
  
  return _impl_.api_secret_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientOptions::release_api_secret() {
  // @@protoc_insertion_point(field_release:inworld.ndkData.ClientOptions.api_secret)
  return _impl_.api_secret_.Release();
}
inline void ClientOptions::set_allocated_api_secret(std::string* api_secret) {
  if (api_secret != nullptr) {
    
  } else {
    
  }
  _impl_.api_secret_.SetAllocated(api_secret, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.api_secret_.IsDefault()) {
    _impl_.api_secret_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:inworld.ndkData.ClientOptions.api_secret)
}

// string player_name = 6;
inline void ClientOptions::clear_player_name() {
  _impl_.player_name_.ClearToEmpty();
}
inline const std::string& ClientOptions::player_name() const {
  // @@protoc_insertion_point(field_get:inworld.ndkData.ClientOptions.player_name)
  return _internal_player_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientOptions::set_player_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.player_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:inworld.ndkData.ClientOptions.player_name)
}
inline std::string* ClientOptions::mutable_player_name() {
  std::string* _s = _internal_mutable_player_name();
  // @@protoc_insertion_point(field_mutable:inworld.ndkData.ClientOptions.player_name)
  return _s;
}
inline const std::string& ClientOptions::_internal_player_name() const {
  return _impl_.player_name_.Get();
}
inline void ClientOptions::_internal_set_player_name(const std::string& value) {
  
  _impl_.player_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientOptions::_internal_mutable_player_name() {
  
  return _impl_.player_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientOptions::release_player_name() {
  // @@protoc_insertion_point(field_release:inworld.ndkData.ClientOptions.player_name)
  return _impl_.player_name_.Release();
}
inline void ClientOptions::set_allocated_player_name(std::string* player_name) {
  if (player_name != nullptr) {
    
  } else {
    
  }
  _impl_.player_name_.SetAllocated(player_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.player_name_.IsDefault()) {
    _impl_.player_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:inworld.ndkData.ClientOptions.player_name)
}

// string token = 7;
inline void ClientOptions::clear_token() {
  _impl_.token_.ClearToEmpty();
}
inline const std::string& ClientOptions::token() const {
  // @@protoc_insertion_point(field_get:inworld.ndkData.ClientOptions.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientOptions::set_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:inworld.ndkData.ClientOptions.token)
}
inline std::string* ClientOptions::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:inworld.ndkData.ClientOptions.token)
  return _s;
}
inline const std::string& ClientOptions::_internal_token() const {
  return _impl_.token_.Get();
}
inline void ClientOptions::_internal_set_token(const std::string& value) {
  
  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientOptions::_internal_mutable_token() {
  
  return _impl_.token_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientOptions::release_token() {
  // @@protoc_insertion_point(field_release:inworld.ndkData.ClientOptions.token)
  return _impl_.token_.Release();
}
inline void ClientOptions::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  _impl_.token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:inworld.ndkData.ClientOptions.token)
}

// string session_id = 8;
inline void ClientOptions::clear_session_id() {
  _impl_.session_id_.ClearToEmpty();
}
inline const std::string& ClientOptions::session_id() const {
  // @@protoc_insertion_point(field_get:inworld.ndkData.ClientOptions.session_id)
  return _internal_session_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientOptions::set_session_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.session_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:inworld.ndkData.ClientOptions.session_id)
}
inline std::string* ClientOptions::mutable_session_id() {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:inworld.ndkData.ClientOptions.session_id)
  return _s;
}
inline const std::string& ClientOptions::_internal_session_id() const {
  return _impl_.session_id_.Get();
}
inline void ClientOptions::_internal_set_session_id(const std::string& value) {
  
  _impl_.session_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientOptions::_internal_mutable_session_id() {
  
  return _impl_.session_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientOptions::release_session_id() {
  // @@protoc_insertion_point(field_release:inworld.ndkData.ClientOptions.session_id)
  return _impl_.session_id_.Release();
}
inline void ClientOptions::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  _impl_.session_id_.SetAllocated(session_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.session_id_.IsDefault()) {
    _impl_.session_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:inworld.ndkData.ClientOptions.session_id)
}

// -------------------------------------------------------------------

// AgentInfo

// string BrainName = 1;
inline void AgentInfo::clear_brainname() {
  _impl_.brainname_.ClearToEmpty();
}
inline const std::string& AgentInfo::brainname() const {
  // @@protoc_insertion_point(field_get:inworld.ndkData.AgentInfo.BrainName)
  return _internal_brainname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AgentInfo::set_brainname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.brainname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:inworld.ndkData.AgentInfo.BrainName)
}
inline std::string* AgentInfo::mutable_brainname() {
  std::string* _s = _internal_mutable_brainname();
  // @@protoc_insertion_point(field_mutable:inworld.ndkData.AgentInfo.BrainName)
  return _s;
}
inline const std::string& AgentInfo::_internal_brainname() const {
  return _impl_.brainname_.Get();
}
inline void AgentInfo::_internal_set_brainname(const std::string& value) {
  
  _impl_.brainname_.Set(value, GetArenaForAllocation());
}
inline std::string* AgentInfo::_internal_mutable_brainname() {
  
  return _impl_.brainname_.Mutable(GetArenaForAllocation());
}
inline std::string* AgentInfo::release_brainname() {
  // @@protoc_insertion_point(field_release:inworld.ndkData.AgentInfo.BrainName)
  return _impl_.brainname_.Release();
}
inline void AgentInfo::set_allocated_brainname(std::string* brainname) {
  if (brainname != nullptr) {
    
  } else {
    
  }
  _impl_.brainname_.SetAllocated(brainname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.brainname_.IsDefault()) {
    _impl_.brainname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:inworld.ndkData.AgentInfo.BrainName)
}

// string AgentId = 2;
inline void AgentInfo::clear_agentid() {
  _impl_.agentid_.ClearToEmpty();
}
inline const std::string& AgentInfo::agentid() const {
  // @@protoc_insertion_point(field_get:inworld.ndkData.AgentInfo.AgentId)
  return _internal_agentid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AgentInfo::set_agentid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.agentid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:inworld.ndkData.AgentInfo.AgentId)
}
inline std::string* AgentInfo::mutable_agentid() {
  std::string* _s = _internal_mutable_agentid();
  // @@protoc_insertion_point(field_mutable:inworld.ndkData.AgentInfo.AgentId)
  return _s;
}
inline const std::string& AgentInfo::_internal_agentid() const {
  return _impl_.agentid_.Get();
}
inline void AgentInfo::_internal_set_agentid(const std::string& value) {
  
  _impl_.agentid_.Set(value, GetArenaForAllocation());
}
inline std::string* AgentInfo::_internal_mutable_agentid() {
  
  return _impl_.agentid_.Mutable(GetArenaForAllocation());
}
inline std::string* AgentInfo::release_agentid() {
  // @@protoc_insertion_point(field_release:inworld.ndkData.AgentInfo.AgentId)
  return _impl_.agentid_.Release();
}
inline void AgentInfo::set_allocated_agentid(std::string* agentid) {
  if (agentid != nullptr) {
    
  } else {
    
  }
  _impl_.agentid_.SetAllocated(agentid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.agentid_.IsDefault()) {
    _impl_.agentid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:inworld.ndkData.AgentInfo.AgentId)
}

// string GivenName = 3;
inline void AgentInfo::clear_givenname() {
  _impl_.givenname_.ClearToEmpty();
}
inline const std::string& AgentInfo::givenname() const {
  // @@protoc_insertion_point(field_get:inworld.ndkData.AgentInfo.GivenName)
  return _internal_givenname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AgentInfo::set_givenname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.givenname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:inworld.ndkData.AgentInfo.GivenName)
}
inline std::string* AgentInfo::mutable_givenname() {
  std::string* _s = _internal_mutable_givenname();
  // @@protoc_insertion_point(field_mutable:inworld.ndkData.AgentInfo.GivenName)
  return _s;
}
inline const std::string& AgentInfo::_internal_givenname() const {
  return _impl_.givenname_.Get();
}
inline void AgentInfo::_internal_set_givenname(const std::string& value) {
  
  _impl_.givenname_.Set(value, GetArenaForAllocation());
}
inline std::string* AgentInfo::_internal_mutable_givenname() {
  
  return _impl_.givenname_.Mutable(GetArenaForAllocation());
}
inline std::string* AgentInfo::release_givenname() {
  // @@protoc_insertion_point(field_release:inworld.ndkData.AgentInfo.GivenName)
  return _impl_.givenname_.Release();
}
inline void AgentInfo::set_allocated_givenname(std::string* givenname) {
  if (givenname != nullptr) {
    
  } else {
    
  }
  _impl_.givenname_.SetAllocated(givenname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.givenname_.IsDefault()) {
    _impl_.givenname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:inworld.ndkData.AgentInfo.GivenName)
}

// -------------------------------------------------------------------

// SessionInfo

// string SessionId = 1;
inline void SessionInfo::clear_sessionid() {
  _impl_.sessionid_.ClearToEmpty();
}
inline const std::string& SessionInfo::sessionid() const {
  // @@protoc_insertion_point(field_get:inworld.ndkData.SessionInfo.SessionId)
  return _internal_sessionid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SessionInfo::set_sessionid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sessionid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:inworld.ndkData.SessionInfo.SessionId)
}
inline std::string* SessionInfo::mutable_sessionid() {
  std::string* _s = _internal_mutable_sessionid();
  // @@protoc_insertion_point(field_mutable:inworld.ndkData.SessionInfo.SessionId)
  return _s;
}
inline const std::string& SessionInfo::_internal_sessionid() const {
  return _impl_.sessionid_.Get();
}
inline void SessionInfo::_internal_set_sessionid(const std::string& value) {
  
  _impl_.sessionid_.Set(value, GetArenaForAllocation());
}
inline std::string* SessionInfo::_internal_mutable_sessionid() {
  
  return _impl_.sessionid_.Mutable(GetArenaForAllocation());
}
inline std::string* SessionInfo::release_sessionid() {
  // @@protoc_insertion_point(field_release:inworld.ndkData.SessionInfo.SessionId)
  return _impl_.sessionid_.Release();
}
inline void SessionInfo::set_allocated_sessionid(std::string* sessionid) {
  if (sessionid != nullptr) {
    
  } else {
    
  }
  _impl_.sessionid_.SetAllocated(sessionid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sessionid_.IsDefault()) {
    _impl_.sessionid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:inworld.ndkData.SessionInfo.SessionId)
}

// string Token = 2;
inline void SessionInfo::clear_token() {
  _impl_.token_.ClearToEmpty();
}
inline const std::string& SessionInfo::token() const {
  // @@protoc_insertion_point(field_get:inworld.ndkData.SessionInfo.Token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SessionInfo::set_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:inworld.ndkData.SessionInfo.Token)
}
inline std::string* SessionInfo::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:inworld.ndkData.SessionInfo.Token)
  return _s;
}
inline const std::string& SessionInfo::_internal_token() const {
  return _impl_.token_.Get();
}
inline void SessionInfo::_internal_set_token(const std::string& value) {
  
  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* SessionInfo::_internal_mutable_token() {
  
  return _impl_.token_.Mutable(GetArenaForAllocation());
}
inline std::string* SessionInfo::release_token() {
  // @@protoc_insertion_point(field_release:inworld.ndkData.SessionInfo.Token)
  return _impl_.token_.Release();
}
inline void SessionInfo::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  _impl_.token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:inworld.ndkData.SessionInfo.Token)
}

// int64 ExpirationTime = 3;
inline void SessionInfo::clear_expirationtime() {
  _impl_.expirationtime_ = int64_t{0};
}
inline int64_t SessionInfo::_internal_expirationtime() const {
  return _impl_.expirationtime_;
}
inline int64_t SessionInfo::expirationtime() const {
  // @@protoc_insertion_point(field_get:inworld.ndkData.SessionInfo.ExpirationTime)
  return _internal_expirationtime();
}
inline void SessionInfo::_internal_set_expirationtime(int64_t value) {
  
  _impl_.expirationtime_ = value;
}
inline void SessionInfo::set_expirationtime(int64_t value) {
  _internal_set_expirationtime(value);
  // @@protoc_insertion_point(field_set:inworld.ndkData.SessionInfo.ExpirationTime)
}

// bool IsValid = 4;
inline void SessionInfo::clear_isvalid() {
  _impl_.isvalid_ = false;
}
inline bool SessionInfo::_internal_isvalid() const {
  return _impl_.isvalid_;
}
inline bool SessionInfo::isvalid() const {
  // @@protoc_insertion_point(field_get:inworld.ndkData.SessionInfo.IsValid)
  return _internal_isvalid();
}
inline void SessionInfo::_internal_set_isvalid(bool value) {
  
  _impl_.isvalid_ = value;
}
inline void SessionInfo::set_isvalid(bool value) {
  _internal_set_isvalid(value);
  // @@protoc_insertion_point(field_set:inworld.ndkData.SessionInfo.IsValid)
}

// -------------------------------------------------------------------

// AgentInfoArray

// repeated .inworld.ndkData.AgentInfo agent_info_list = 1;
inline int AgentInfoArray::_internal_agent_info_list_size() const {
  return _impl_.agent_info_list_.size();
}
inline int AgentInfoArray::agent_info_list_size() const {
  return _internal_agent_info_list_size();
}
inline void AgentInfoArray::clear_agent_info_list() {
  _impl_.agent_info_list_.Clear();
}
inline ::inworld::ndkData::AgentInfo* AgentInfoArray::mutable_agent_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:inworld.ndkData.AgentInfoArray.agent_info_list)
  return _impl_.agent_info_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inworld::ndkData::AgentInfo >*
AgentInfoArray::mutable_agent_info_list() {
  // @@protoc_insertion_point(field_mutable_list:inworld.ndkData.AgentInfoArray.agent_info_list)
  return &_impl_.agent_info_list_;
}
inline const ::inworld::ndkData::AgentInfo& AgentInfoArray::_internal_agent_info_list(int index) const {
  return _impl_.agent_info_list_.Get(index);
}
inline const ::inworld::ndkData::AgentInfo& AgentInfoArray::agent_info_list(int index) const {
  // @@protoc_insertion_point(field_get:inworld.ndkData.AgentInfoArray.agent_info_list)
  return _internal_agent_info_list(index);
}
inline ::inworld::ndkData::AgentInfo* AgentInfoArray::_internal_add_agent_info_list() {
  return _impl_.agent_info_list_.Add();
}
inline ::inworld::ndkData::AgentInfo* AgentInfoArray::add_agent_info_list() {
  ::inworld::ndkData::AgentInfo* _add = _internal_add_agent_info_list();
  // @@protoc_insertion_point(field_add:inworld.ndkData.AgentInfoArray.agent_info_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inworld::ndkData::AgentInfo >&
AgentInfoArray::agent_info_list() const {
  // @@protoc_insertion_point(field_list:inworld.ndkData.AgentInfoArray.agent_info_list)
  return _impl_.agent_info_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ndkData
}  // namespace inworld

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::inworld::ndkData::ConnectionState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::inworld::ndkData::ConnectionState>() {
  return ::inworld::ndkData::ConnectionState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_inworld_5fndkData_2eproto
