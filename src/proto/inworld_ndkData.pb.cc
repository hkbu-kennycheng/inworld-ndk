// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inworld_ndkData.proto

#include "inworld_ndkData.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace inworld {
namespace ndkData {
PROTOBUF_CONSTEXPR ClientOptions::ClientOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.auth_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.load_scene_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.scene_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.api_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.api_secret_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.session_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ClientOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientOptionsDefaultTypeInternal() {}
  union {
    ClientOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientOptionsDefaultTypeInternal _ClientOptions_default_instance_;
PROTOBUF_CONSTEXPR AgentInfo::AgentInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.brainname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.agentid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.givenname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AgentInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AgentInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AgentInfoDefaultTypeInternal() {}
  union {
    AgentInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AgentInfoDefaultTypeInternal _AgentInfo_default_instance_;
PROTOBUF_CONSTEXPR SessionInfo::SessionInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sessionid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.expirationtime_)*/int64_t{0}
  , /*decltype(_impl_.isvalid_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SessionInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SessionInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SessionInfoDefaultTypeInternal() {}
  union {
    SessionInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SessionInfoDefaultTypeInternal _SessionInfo_default_instance_;
PROTOBUF_CONSTEXPR AgentInfoArray::AgentInfoArray(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.agent_info_list_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AgentInfoArrayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AgentInfoArrayDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AgentInfoArrayDefaultTypeInternal() {}
  union {
    AgentInfoArray _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AgentInfoArrayDefaultTypeInternal _AgentInfoArray_default_instance_;
}  // namespace ndkData
}  // namespace inworld
static ::_pb::Metadata file_level_metadata_inworld_5fndkData_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_inworld_5fndkData_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_inworld_5fndkData_2eproto = nullptr;

const uint32_t TableStruct_inworld_5fndkData_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::ClientOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::ClientOptions, _impl_.auth_url_),
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::ClientOptions, _impl_.load_scene_url_),
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::ClientOptions, _impl_.scene_name_),
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::ClientOptions, _impl_.api_key_),
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::ClientOptions, _impl_.api_secret_),
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::ClientOptions, _impl_.player_name_),
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::ClientOptions, _impl_.token_),
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::ClientOptions, _impl_.session_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::AgentInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::AgentInfo, _impl_.brainname_),
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::AgentInfo, _impl_.agentid_),
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::AgentInfo, _impl_.givenname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::SessionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::SessionInfo, _impl_.sessionid_),
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::SessionInfo, _impl_.token_),
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::SessionInfo, _impl_.expirationtime_),
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::SessionInfo, _impl_.isvalid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::AgentInfoArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::inworld::ndkData::AgentInfoArray, _impl_.agent_info_list_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::inworld::ndkData::ClientOptions)},
  { 14, -1, -1, sizeof(::inworld::ndkData::AgentInfo)},
  { 23, -1, -1, sizeof(::inworld::ndkData::SessionInfo)},
  { 33, -1, -1, sizeof(::inworld::ndkData::AgentInfoArray)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::inworld::ndkData::_ClientOptions_default_instance_._instance,
  &::inworld::ndkData::_AgentInfo_default_instance_._instance,
  &::inworld::ndkData::_SessionInfo_default_instance_._instance,
  &::inworld::ndkData::_AgentInfoArray_default_instance_._instance,
};

const char descriptor_table_protodef_inworld_5fndkData_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025inworld_ndkData.proto\022\017inworld.ndkData"
  "\"\252\001\n\rClientOptions\022\020\n\010auth_url\030\001 \001(\t\022\026\n\016"
  "load_scene_url\030\002 \001(\t\022\022\n\nscene_name\030\003 \001(\t"
  "\022\017\n\007api_key\030\004 \001(\t\022\022\n\napi_secret\030\005 \001(\t\022\023\n"
  "\013player_name\030\006 \001(\t\022\r\n\005token\030\007 \001(\t\022\022\n\nses"
  "sion_id\030\010 \001(\t\"B\n\tAgentInfo\022\021\n\tBrainName\030"
  "\001 \001(\t\022\017\n\007AgentId\030\002 \001(\t\022\021\n\tGivenName\030\003 \001("
  "\t\"X\n\013SessionInfo\022\021\n\tSessionId\030\001 \001(\t\022\r\n\005T"
  "oken\030\002 \001(\t\022\026\n\016ExpirationTime\030\003 \001(\003\022\017\n\007Is"
  "Valid\030\004 \001(\010\"E\n\016AgentInfoArray\0223\n\017agent_i"
  "nfo_list\030\001 \003(\0132\032.inworld.ndkData.AgentIn"
  "fo*v\n\017ConnectionState\022\010\n\004Idle\020\000\022\016\n\nConne"
  "cting\020\001\022\r\n\tConnected\020\002\022\n\n\006Failed\020\003\022\n\n\006Pa"
  "used\020\004\022\020\n\014Disconnected\020\005\022\020\n\014Reconnecting"
  "\020\006b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_inworld_5fndkData_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_inworld_5fndkData_2eproto = {
    false, false, 570, descriptor_table_protodef_inworld_5fndkData_2eproto,
    "inworld_ndkData.proto",
    &descriptor_table_inworld_5fndkData_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_inworld_5fndkData_2eproto::offsets,
    file_level_metadata_inworld_5fndkData_2eproto, file_level_enum_descriptors_inworld_5fndkData_2eproto,
    file_level_service_descriptors_inworld_5fndkData_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_inworld_5fndkData_2eproto_getter() {
  return &descriptor_table_inworld_5fndkData_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_inworld_5fndkData_2eproto(&descriptor_table_inworld_5fndkData_2eproto);
namespace inworld {
namespace ndkData {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConnectionState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_inworld_5fndkData_2eproto);
  return file_level_enum_descriptors_inworld_5fndkData_2eproto[0];
}
bool ConnectionState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ClientOptions::_Internal {
 public:
};

ClientOptions::ClientOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:inworld.ndkData.ClientOptions)
}
ClientOptions::ClientOptions(const ClientOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClientOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.auth_url_){}
    , decltype(_impl_.load_scene_url_){}
    , decltype(_impl_.scene_name_){}
    , decltype(_impl_.api_key_){}
    , decltype(_impl_.api_secret_){}
    , decltype(_impl_.player_name_){}
    , decltype(_impl_.token_){}
    , decltype(_impl_.session_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.auth_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.auth_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_auth_url().empty()) {
    _this->_impl_.auth_url_.Set(from._internal_auth_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.load_scene_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.load_scene_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_load_scene_url().empty()) {
    _this->_impl_.load_scene_url_.Set(from._internal_load_scene_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.scene_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.scene_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_scene_name().empty()) {
    _this->_impl_.scene_name_.Set(from._internal_scene_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.api_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.api_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_api_key().empty()) {
    _this->_impl_.api_key_.Set(from._internal_api_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.api_secret_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.api_secret_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_api_secret().empty()) {
    _this->_impl_.api_secret_.Set(from._internal_api_secret(), 
      _this->GetArenaForAllocation());
  }
  _impl_.player_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_player_name().empty()) {
    _this->_impl_.player_name_.Set(from._internal_player_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_session_id().empty()) {
    _this->_impl_.session_id_.Set(from._internal_session_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:inworld.ndkData.ClientOptions)
}

inline void ClientOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.auth_url_){}
    , decltype(_impl_.load_scene_url_){}
    , decltype(_impl_.scene_name_){}
    , decltype(_impl_.api_key_){}
    , decltype(_impl_.api_secret_){}
    , decltype(_impl_.player_name_){}
    , decltype(_impl_.token_){}
    , decltype(_impl_.session_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.auth_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.auth_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.load_scene_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.load_scene_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.scene_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.scene_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.api_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.api_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.api_secret_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.api_secret_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.player_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ClientOptions::~ClientOptions() {
  // @@protoc_insertion_point(destructor:inworld.ndkData.ClientOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.auth_url_.Destroy();
  _impl_.load_scene_url_.Destroy();
  _impl_.scene_name_.Destroy();
  _impl_.api_key_.Destroy();
  _impl_.api_secret_.Destroy();
  _impl_.player_name_.Destroy();
  _impl_.token_.Destroy();
  _impl_.session_id_.Destroy();
}

void ClientOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClientOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:inworld.ndkData.ClientOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.auth_url_.ClearToEmpty();
  _impl_.load_scene_url_.ClearToEmpty();
  _impl_.scene_name_.ClearToEmpty();
  _impl_.api_key_.ClearToEmpty();
  _impl_.api_secret_.ClearToEmpty();
  _impl_.player_name_.ClearToEmpty();
  _impl_.token_.ClearToEmpty();
  _impl_.session_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string auth_url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_auth_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "inworld.ndkData.ClientOptions.auth_url"));
        } else
          goto handle_unusual;
        continue;
      // string load_scene_url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_load_scene_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "inworld.ndkData.ClientOptions.load_scene_url"));
        } else
          goto handle_unusual;
        continue;
      // string scene_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_scene_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "inworld.ndkData.ClientOptions.scene_name"));
        } else
          goto handle_unusual;
        continue;
      // string api_key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_api_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "inworld.ndkData.ClientOptions.api_key"));
        } else
          goto handle_unusual;
        continue;
      // string api_secret = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_api_secret();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "inworld.ndkData.ClientOptions.api_secret"));
        } else
          goto handle_unusual;
        continue;
      // string player_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_player_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "inworld.ndkData.ClientOptions.player_name"));
        } else
          goto handle_unusual;
        continue;
      // string token = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "inworld.ndkData.ClientOptions.token"));
        } else
          goto handle_unusual;
        continue;
      // string session_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "inworld.ndkData.ClientOptions.session_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inworld.ndkData.ClientOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string auth_url = 1;
  if (!this->_internal_auth_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auth_url().data(), static_cast<int>(this->_internal_auth_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inworld.ndkData.ClientOptions.auth_url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_auth_url(), target);
  }

  // string load_scene_url = 2;
  if (!this->_internal_load_scene_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_load_scene_url().data(), static_cast<int>(this->_internal_load_scene_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inworld.ndkData.ClientOptions.load_scene_url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_load_scene_url(), target);
  }

  // string scene_name = 3;
  if (!this->_internal_scene_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scene_name().data(), static_cast<int>(this->_internal_scene_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inworld.ndkData.ClientOptions.scene_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_scene_name(), target);
  }

  // string api_key = 4;
  if (!this->_internal_api_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_api_key().data(), static_cast<int>(this->_internal_api_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inworld.ndkData.ClientOptions.api_key");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_api_key(), target);
  }

  // string api_secret = 5;
  if (!this->_internal_api_secret().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_api_secret().data(), static_cast<int>(this->_internal_api_secret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inworld.ndkData.ClientOptions.api_secret");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_api_secret(), target);
  }

  // string player_name = 6;
  if (!this->_internal_player_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_player_name().data(), static_cast<int>(this->_internal_player_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inworld.ndkData.ClientOptions.player_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_player_name(), target);
  }

  // string token = 7;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inworld.ndkData.ClientOptions.token");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_token(), target);
  }

  // string session_id = 8;
  if (!this->_internal_session_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inworld.ndkData.ClientOptions.session_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inworld.ndkData.ClientOptions)
  return target;
}

size_t ClientOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inworld.ndkData.ClientOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string auth_url = 1;
  if (!this->_internal_auth_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auth_url());
  }

  // string load_scene_url = 2;
  if (!this->_internal_load_scene_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_load_scene_url());
  }

  // string scene_name = 3;
  if (!this->_internal_scene_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scene_name());
  }

  // string api_key = 4;
  if (!this->_internal_api_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_api_key());
  }

  // string api_secret = 5;
  if (!this->_internal_api_secret().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_api_secret());
  }

  // string player_name = 6;
  if (!this->_internal_player_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_player_name());
  }

  // string token = 7;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // string session_id = 8;
  if (!this->_internal_session_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClientOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientOptions::GetClassData() const { return &_class_data_; }


void ClientOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClientOptions*>(&to_msg);
  auto& from = static_cast<const ClientOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:inworld.ndkData.ClientOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_auth_url().empty()) {
    _this->_internal_set_auth_url(from._internal_auth_url());
  }
  if (!from._internal_load_scene_url().empty()) {
    _this->_internal_set_load_scene_url(from._internal_load_scene_url());
  }
  if (!from._internal_scene_name().empty()) {
    _this->_internal_set_scene_name(from._internal_scene_name());
  }
  if (!from._internal_api_key().empty()) {
    _this->_internal_set_api_key(from._internal_api_key());
  }
  if (!from._internal_api_secret().empty()) {
    _this->_internal_set_api_secret(from._internal_api_secret());
  }
  if (!from._internal_player_name().empty()) {
    _this->_internal_set_player_name(from._internal_player_name());
  }
  if (!from._internal_token().empty()) {
    _this->_internal_set_token(from._internal_token());
  }
  if (!from._internal_session_id().empty()) {
    _this->_internal_set_session_id(from._internal_session_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientOptions::CopyFrom(const ClientOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inworld.ndkData.ClientOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientOptions::IsInitialized() const {
  return true;
}

void ClientOptions::InternalSwap(ClientOptions* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.auth_url_, lhs_arena,
      &other->_impl_.auth_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.load_scene_url_, lhs_arena,
      &other->_impl_.load_scene_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.scene_name_, lhs_arena,
      &other->_impl_.scene_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.api_key_, lhs_arena,
      &other->_impl_.api_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.api_secret_, lhs_arena,
      &other->_impl_.api_secret_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.player_name_, lhs_arena,
      &other->_impl_.player_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.session_id_, lhs_arena,
      &other->_impl_.session_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_inworld_5fndkData_2eproto_getter, &descriptor_table_inworld_5fndkData_2eproto_once,
      file_level_metadata_inworld_5fndkData_2eproto[0]);
}

// ===================================================================

class AgentInfo::_Internal {
 public:
};

AgentInfo::AgentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:inworld.ndkData.AgentInfo)
}
AgentInfo::AgentInfo(const AgentInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AgentInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.brainname_){}
    , decltype(_impl_.agentid_){}
    , decltype(_impl_.givenname_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.brainname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.brainname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_brainname().empty()) {
    _this->_impl_.brainname_.Set(from._internal_brainname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.agentid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.agentid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_agentid().empty()) {
    _this->_impl_.agentid_.Set(from._internal_agentid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.givenname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.givenname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_givenname().empty()) {
    _this->_impl_.givenname_.Set(from._internal_givenname(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:inworld.ndkData.AgentInfo)
}

inline void AgentInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.brainname_){}
    , decltype(_impl_.agentid_){}
    , decltype(_impl_.givenname_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.brainname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.brainname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.agentid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.agentid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.givenname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.givenname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AgentInfo::~AgentInfo() {
  // @@protoc_insertion_point(destructor:inworld.ndkData.AgentInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AgentInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.brainname_.Destroy();
  _impl_.agentid_.Destroy();
  _impl_.givenname_.Destroy();
}

void AgentInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AgentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:inworld.ndkData.AgentInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.brainname_.ClearToEmpty();
  _impl_.agentid_.ClearToEmpty();
  _impl_.givenname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AgentInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string BrainName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_brainname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "inworld.ndkData.AgentInfo.BrainName"));
        } else
          goto handle_unusual;
        continue;
      // string AgentId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_agentid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "inworld.ndkData.AgentInfo.AgentId"));
        } else
          goto handle_unusual;
        continue;
      // string GivenName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_givenname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "inworld.ndkData.AgentInfo.GivenName"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AgentInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inworld.ndkData.AgentInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string BrainName = 1;
  if (!this->_internal_brainname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_brainname().data(), static_cast<int>(this->_internal_brainname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inworld.ndkData.AgentInfo.BrainName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_brainname(), target);
  }

  // string AgentId = 2;
  if (!this->_internal_agentid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_agentid().data(), static_cast<int>(this->_internal_agentid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inworld.ndkData.AgentInfo.AgentId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_agentid(), target);
  }

  // string GivenName = 3;
  if (!this->_internal_givenname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_givenname().data(), static_cast<int>(this->_internal_givenname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inworld.ndkData.AgentInfo.GivenName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_givenname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inworld.ndkData.AgentInfo)
  return target;
}

size_t AgentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inworld.ndkData.AgentInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string BrainName = 1;
  if (!this->_internal_brainname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_brainname());
  }

  // string AgentId = 2;
  if (!this->_internal_agentid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_agentid());
  }

  // string GivenName = 3;
  if (!this->_internal_givenname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_givenname());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AgentInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AgentInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AgentInfo::GetClassData() const { return &_class_data_; }


void AgentInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AgentInfo*>(&to_msg);
  auto& from = static_cast<const AgentInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:inworld.ndkData.AgentInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_brainname().empty()) {
    _this->_internal_set_brainname(from._internal_brainname());
  }
  if (!from._internal_agentid().empty()) {
    _this->_internal_set_agentid(from._internal_agentid());
  }
  if (!from._internal_givenname().empty()) {
    _this->_internal_set_givenname(from._internal_givenname());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AgentInfo::CopyFrom(const AgentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inworld.ndkData.AgentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentInfo::IsInitialized() const {
  return true;
}

void AgentInfo::InternalSwap(AgentInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.brainname_, lhs_arena,
      &other->_impl_.brainname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.agentid_, lhs_arena,
      &other->_impl_.agentid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.givenname_, lhs_arena,
      &other->_impl_.givenname_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AgentInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_inworld_5fndkData_2eproto_getter, &descriptor_table_inworld_5fndkData_2eproto_once,
      file_level_metadata_inworld_5fndkData_2eproto[1]);
}

// ===================================================================

class SessionInfo::_Internal {
 public:
};

SessionInfo::SessionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:inworld.ndkData.SessionInfo)
}
SessionInfo::SessionInfo(const SessionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SessionInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sessionid_){}
    , decltype(_impl_.token_){}
    , decltype(_impl_.expirationtime_){}
    , decltype(_impl_.isvalid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sessionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sessionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sessionid().empty()) {
    _this->_impl_.sessionid_.Set(from._internal_sessionid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.expirationtime_, &from._impl_.expirationtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.isvalid_) -
    reinterpret_cast<char*>(&_impl_.expirationtime_)) + sizeof(_impl_.isvalid_));
  // @@protoc_insertion_point(copy_constructor:inworld.ndkData.SessionInfo)
}

inline void SessionInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sessionid_){}
    , decltype(_impl_.token_){}
    , decltype(_impl_.expirationtime_){int64_t{0}}
    , decltype(_impl_.isvalid_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sessionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sessionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SessionInfo::~SessionInfo() {
  // @@protoc_insertion_point(destructor:inworld.ndkData.SessionInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SessionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sessionid_.Destroy();
  _impl_.token_.Destroy();
}

void SessionInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SessionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:inworld.ndkData.SessionInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sessionid_.ClearToEmpty();
  _impl_.token_.ClearToEmpty();
  ::memset(&_impl_.expirationtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.isvalid_) -
      reinterpret_cast<char*>(&_impl_.expirationtime_)) + sizeof(_impl_.isvalid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string SessionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sessionid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "inworld.ndkData.SessionInfo.SessionId"));
        } else
          goto handle_unusual;
        continue;
      // string Token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "inworld.ndkData.SessionInfo.Token"));
        } else
          goto handle_unusual;
        continue;
      // int64 ExpirationTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.expirationtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsValid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.isvalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SessionInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inworld.ndkData.SessionInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string SessionId = 1;
  if (!this->_internal_sessionid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sessionid().data(), static_cast<int>(this->_internal_sessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inworld.ndkData.SessionInfo.SessionId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sessionid(), target);
  }

  // string Token = 2;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inworld.ndkData.SessionInfo.Token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_token(), target);
  }

  // int64 ExpirationTime = 3;
  if (this->_internal_expirationtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_expirationtime(), target);
  }

  // bool IsValid = 4;
  if (this->_internal_isvalid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_isvalid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inworld.ndkData.SessionInfo)
  return target;
}

size_t SessionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inworld.ndkData.SessionInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string SessionId = 1;
  if (!this->_internal_sessionid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sessionid());
  }

  // string Token = 2;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // int64 ExpirationTime = 3;
  if (this->_internal_expirationtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_expirationtime());
  }

  // bool IsValid = 4;
  if (this->_internal_isvalid() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SessionInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SessionInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SessionInfo::GetClassData() const { return &_class_data_; }


void SessionInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SessionInfo*>(&to_msg);
  auto& from = static_cast<const SessionInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:inworld.ndkData.SessionInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sessionid().empty()) {
    _this->_internal_set_sessionid(from._internal_sessionid());
  }
  if (!from._internal_token().empty()) {
    _this->_internal_set_token(from._internal_token());
  }
  if (from._internal_expirationtime() != 0) {
    _this->_internal_set_expirationtime(from._internal_expirationtime());
  }
  if (from._internal_isvalid() != 0) {
    _this->_internal_set_isvalid(from._internal_isvalid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SessionInfo::CopyFrom(const SessionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inworld.ndkData.SessionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionInfo::IsInitialized() const {
  return true;
}

void SessionInfo::InternalSwap(SessionInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sessionid_, lhs_arena,
      &other->_impl_.sessionid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SessionInfo, _impl_.isvalid_)
      + sizeof(SessionInfo::_impl_.isvalid_)
      - PROTOBUF_FIELD_OFFSET(SessionInfo, _impl_.expirationtime_)>(
          reinterpret_cast<char*>(&_impl_.expirationtime_),
          reinterpret_cast<char*>(&other->_impl_.expirationtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_inworld_5fndkData_2eproto_getter, &descriptor_table_inworld_5fndkData_2eproto_once,
      file_level_metadata_inworld_5fndkData_2eproto[2]);
}

// ===================================================================

class AgentInfoArray::_Internal {
 public:
};

AgentInfoArray::AgentInfoArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:inworld.ndkData.AgentInfoArray)
}
AgentInfoArray::AgentInfoArray(const AgentInfoArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AgentInfoArray* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.agent_info_list_){from._impl_.agent_info_list_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:inworld.ndkData.AgentInfoArray)
}

inline void AgentInfoArray::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.agent_info_list_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AgentInfoArray::~AgentInfoArray() {
  // @@protoc_insertion_point(destructor:inworld.ndkData.AgentInfoArray)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AgentInfoArray::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.agent_info_list_.~RepeatedPtrField();
}

void AgentInfoArray::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AgentInfoArray::Clear() {
// @@protoc_insertion_point(message_clear_start:inworld.ndkData.AgentInfoArray)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.agent_info_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AgentInfoArray::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .inworld.ndkData.AgentInfo agent_info_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_agent_info_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AgentInfoArray::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inworld.ndkData.AgentInfoArray)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .inworld.ndkData.AgentInfo agent_info_list = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_agent_info_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_agent_info_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inworld.ndkData.AgentInfoArray)
  return target;
}

size_t AgentInfoArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inworld.ndkData.AgentInfoArray)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .inworld.ndkData.AgentInfo agent_info_list = 1;
  total_size += 1UL * this->_internal_agent_info_list_size();
  for (const auto& msg : this->_impl_.agent_info_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AgentInfoArray::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AgentInfoArray::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AgentInfoArray::GetClassData() const { return &_class_data_; }


void AgentInfoArray::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AgentInfoArray*>(&to_msg);
  auto& from = static_cast<const AgentInfoArray&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:inworld.ndkData.AgentInfoArray)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.agent_info_list_.MergeFrom(from._impl_.agent_info_list_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AgentInfoArray::CopyFrom(const AgentInfoArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inworld.ndkData.AgentInfoArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentInfoArray::IsInitialized() const {
  return true;
}

void AgentInfoArray::InternalSwap(AgentInfoArray* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.agent_info_list_.InternalSwap(&other->_impl_.agent_info_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AgentInfoArray::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_inworld_5fndkData_2eproto_getter, &descriptor_table_inworld_5fndkData_2eproto_once,
      file_level_metadata_inworld_5fndkData_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ndkData
}  // namespace inworld
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::inworld::ndkData::ClientOptions*
Arena::CreateMaybeMessage< ::inworld::ndkData::ClientOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inworld::ndkData::ClientOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::inworld::ndkData::AgentInfo*
Arena::CreateMaybeMessage< ::inworld::ndkData::AgentInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inworld::ndkData::AgentInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::inworld::ndkData::SessionInfo*
Arena::CreateMaybeMessage< ::inworld::ndkData::SessionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inworld::ndkData::SessionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::inworld::ndkData::AgentInfoArray*
Arena::CreateMaybeMessage< ::inworld::ndkData::AgentInfoArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inworld::ndkData::AgentInfoArray >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
